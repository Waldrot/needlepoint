import pandas as pd
from wordcloud import WordCloud, ImageColorGenerator
import jinja2
from base64 import b64encode
from collections import Counter
from io import BytesIO
import matplotlib.pyplot as plt  # Import Matplotlib for SVG conversion

# Read the dataset from CSV
df = pd.read_csv('NewsDB-Python/datasets/dataset.csv')

# Task 1: Identify the top 5 keywords by frequency

keywords = df['Keywords'].str.split(';').explode().str.strip()
keyword_counts = Counter(keywords)
top_5_keywords = keyword_counts.most_common(5)
print("Top 5 keywords:", top_5_keywords)

# Task 2: Articles matching the top 5 keywords
articles_top_keywords = df[df['Keywords'].str.contains('|'.join(keyword for keyword, freq in top_5_keywords), case=False)]
print("Number of articles matching top 5 keywords:", len(articles_top_keywords))

# Task 3: Word cloud based on descriptions of articles matching the top 5 keywords or all articles
all_descriptions = ' '.join(df['Description'].dropna())
top_keywords_only = ' '.join([keyword for keyword, freq in top_5_keywords])
all_descriptions_top = all_descriptions + ' ' + top_keywords_only

# Create and save word cloud image to SVG file
wordcloud = WordCloud(width=1200, height=960).generate(all_descriptions_top)
# Convert word cloud image to SVG
plt.figure(figsize=(8, 4))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
svg_image = BytesIO()
plt.savefig(svg_image, format='svg')
encoded_svg = b64encode(svg_image.getvalue()).decode()
wordcloud_svg = f"<img src='data:image/svg+xml;base64,{encoded_svg}' width='1200' height='960'/>"
with open("NewsDB-Python/reports/Descriptions_word_cloud.svg", "w") as f:
    f.write(wordcloud_svg)
print("Word cloud saved to NewsDB-Python/reports/Descriptions_word_cloud.svg")

# Output keyword analysis report in Markdown format
report_md = f"# Keyword Analysis Report\n\n## Top 5 Keywords\n"
for keyword, freq in top_5_keywords:
    report_md += f"- **{keyword}**: {freq}\n"
report_md += "\n## Articles Matching Top Keywords\n"
for index, row in articles_top_keywords.iterrows():
    report_md += f"- **Title**: {row['Title']}\n"
    report_md += f"  - **Author**: {row['Author']}\n"
    report_md += f"  - **Description**: {row['Description'][:250]}\n\n"
with open("NewsDB-Python/reports/keyword_analysis_report.md", "w") as f:
    f.write(report_md)
print("Markdown report saved to NewsDB-Python/reports/keyword_analysis_report.md")

# Output keyword analysis report in HTML format
template_loader = jinja2.FileSystemLoader(searchpath=".")
template_env = jinja2.Environment(loader=template_loader)
template = template_env.get_template("NewsDB-Python/reports/report_template.html")
output = template.render(keywords=top_5_keywords, articles=articles_top_keywords)
with open("NewsDB-Python/reports/report.html", "w") as f:
    f.write(output)
print("HTML report saved to NewsDB-Python/reports/report.html")
